name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        node-version: [18.x]

    env:
      CI: true
      ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install additional dependencies for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgbm-dev

    - name: Install additional dependencies for macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install gnu-tar

    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm install

    - name: Build application
      run: |
        echo "Starting the build process..."
        npm run build || { echo 'Build failed!'; exit 1; }

    - name: Run tests
      run: |
        echo "Running tests..."
        npm test || { echo 'Tests failed!'; exit 1; }

    - name: Check for GitHub Token
      id: check_token
      run: |
        if [ -z "$GH_TOKEN" ]; then
          echo "GH_TOKEN is not set."
          echo "GH_TOKEN_PRESENT=false" >> $GITHUB_ENV
        else
          echo "GH_TOKEN_PRESENT=true" >> $GITHUB_ENV
        fi

    - name: Package without Publishing (macOS)
      if: matrix.os == 'macos-latest' && env.GH_TOKEN_PRESENT == 'false'
      run: |
        echo "GH_TOKEN is not present, skipping publishing..."
        npm run electron-build -- --publish=never || { echo 'Packaging failed!'; exit 1; }

    - name: Package and Publish (macOS)
      if: matrix.os == 'macos-latest' && env.GH_TOKEN_PRESENT == 'true'
      run: |
        echo "Publishing macOS artifacts..."
        npm run release || { echo 'Publishing failed!'; exit 1; }

    - name: Package without Publishing (Windows and Ubuntu)
      if: (matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest') && env.GH_TOKEN_PRESENT == 'false'
      run: |
        echo "GH_TOKEN is not present, skipping publishing..."
        npm run electron-build -- --publish=never || { echo 'Packaging failed!'; exit 1; }

    - name: Package and Publish (Windows and Ubuntu)
      if: (matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest') && env.GH_TOKEN_PRESENT == 'true'
      run: |
        echo "Publishing artifacts..."
        npm run release || { echo 'Publishing failed!'; exit 1; }

    - name: Archive build artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/

    - name: Cleanup caches
      if: failure() || cancelled()
      run: |
        echo "Cleaning up npm cache..."
        npm cache clean --force || echo "Failed to clean npm cache."

    - name: Final Status
      run: |
        echo "Build process completed."
        if [ -z "$GH_TOKEN" ]; then
          echo "Warning: GH_TOKEN was not set. Artifacts were not published."
        else
          echo "Artifacts were published successfully."
        fi

    - name: Set up environment variables
      run: |
        echo "Setting up additional environment variables..."
        echo "ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
