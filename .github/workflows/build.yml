name: Build, Test, and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        node-version: [18.x]
      fail-fast: false

    env:
      CI: true
      ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        echo "Installing project dependencies..."
        npm ci
        echo "Installing Electron dependencies..."
        npx electron-builder install-app-deps
      timeout-minutes: 15

    - name: Run ESLint
      run: |
        echo "Running ESLint..."
        npm run lint || echo "ESLint found issues, but build will continue."
      timeout-minutes: 5
      continue-on-error: true

    - name: Build application
      run: |
        echo "Building the application..."
        npm run build
      timeout-minutes: 30

    - name: Run tests
      run: |
        echo "Running tests..."
        npm install jest-junit --save-dev
        npm test -- --ci --reporters=jest-junit --coverage || echo "Tests failed, but build will continue."
      timeout-minutes: 15
      continue-on-error: true

    - name: Set version
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Setting version..."
        VERSION=$(date +"%Y%m%d%H%M")-$(git rev-parse --short HEAD)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        npm version $VERSION --no-git-tag-version
      timeout-minutes: 5

    - name: Generate changelog
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Generating changelog..."
        npx auto-changelog -p
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md package.json
        git commit -m "chore(release): Version bump to ${{ env.VERSION }}"
        git tag -a "v${{ env.VERSION }}" -m "Version ${{ env.VERSION }}"
      timeout-minutes: 10

    - name: Package and Publish
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        if [ -z "$GH_TOKEN" ]; then
          echo "GH_TOKEN is not set. Skipping publishing steps."
          npm run electron-build -- --publish=never
        else
          echo "Publishing artifacts..."
          npm run release
        fi
      timeout-minutes: 20
      continue-on-error: true

    - name: Push changes
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.GH_TOKEN
      run: |
        git push origin main --follow-tags
      timeout-minutes: 5

    - name: Archive build artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

    - name: Upload Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: ./logs/

    - name: Cleanup caches
      if: always()
      run: |
        echo "Cleaning up npm cache..."
        npm cache clean --force || echo "Failed to clean npm cache."
      continue-on-error: true

    - name: Final Status
      run: |
        echo "Finalizing build process."
        if [ -z "$GH_TOKEN" ]; then
          echo "Warning: GH_TOKEN was not set. Artifacts were not published."
        else
          echo "Build completed successfully, and artifacts were published."
        fi
